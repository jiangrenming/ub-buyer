package com.hykj.hytools.StringUtils.Format.impl;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.hykj.hytools.StringUtils.Format.HYFormat;

public class HYFormatImpl implements HYFormat {

	@Override
	public boolean isEmail(String Str) {
		boolean tag = true;
		final String patternStr = "^([a-z0-9A-Z]+[-|\\.]?)+[a-z0-9A-Z]@([a-z0-9A-Z]+(-[a-z0-9A-Z]+)?\\.)+[a-zA-Z]{2,}$";
		final Pattern pattern = Pattern.compile(patternStr);
		final Matcher mat = pattern.matcher(Str);
		if (!mat.find()) {
			tag = false;
		}
		return tag;
	}

	@Override
	public boolean isMobilePhone(String str) {
		final String patternStr = "^1[3|4|5|7|8][0-9]\\d{8}$";
		Pattern p = Pattern.compile(patternStr);
		Matcher m = p.matcher(str);
		return m.matches();
	}

	@Override
	public boolean isIDCard(String str) {
		String patternStr = "\\d{14}[[0-9],0-9xX]";
		Pattern p = Pattern.compile(patternStr);
		Matcher m = p.matcher(str);
		return m.matches();
	}

	@Override
	public boolean isNum(String str) {
		return str.matches("^[-+]?(([0-9]+)([.]([0-9]+))?|([.]([0-9]+))?)$");
	}

	@Override
	public boolean isFloat(String str) {
		return str
				.matches("^(|[+-]?(0|([1-9]\\d*)|((0|([1-9]\\d*))?\\.\\d{1,2})){1,1})$");
	}

	@Override
	public boolean isLandlinePhone(String str) {
		return str.matches("^(\\d{3,4}-)\\d{7,8}$");
	}

	@Override
	public boolean isDateyyMMdd(String str) {
		String matchesStr = "("
				+ "(^((1[8-9]\\d{2})|([2-9]\\d{3}))([-\\/\\._])(10|12|0?[13578])([-\\/\\._])(3[01]|[12][0-9]|0?[1-9])$)"
				+ "|"
				+ "(^((1[8-9]\\d{2})|([2-9]\\d{3}))([-\\/\\._])(11|0?[469])([-\\/\\._])(30|[12][0-9]|0?[1-9])$)"
				+ "|"
				+ "(^((1[8-9]\\d{2})|([2-9]\\d{3}))([-\\/\\._])(0?2)([-\\/\\._])(2[0-8]|1[0-9]|0?[1-9])$)"
				+ "|"
				+ "(^([2468][048]00)([-\\/\\._])(0?2)([-\\/\\._])(29)$)"
				+ "|"
				+ "(^([3579][26]00)([-\\/\\._])(0?2)([-\\/\\._])(29)$)"
				+ "|"
				+ "(^([1][89][0][48])([-\\/\\._])(0?2)([-\\/\\._])(29)$)"
				+ "|"
				+ "(^([2-9][0-9][0][48])([-\\/\\._])(0?2)([-\\/\\._])(29)$)"
				+ "|"
				+ "(^([1][89][2468][048])([-\\/\\._])(0?2)([-\\/\\._])(29)$)"
				+ "|"
				+ "(^([2-9][0-9][2468][048])([-\\/\\._])(0?2)([-\\/\\._])(29)$)"
				+ "|"
				+ "(^([1][89][13579][26])([-\\/\\._])(0?2)([-\\/\\._])(29)$)"
				+ "|"
				+ "(^([2-9][0-9][13579][26])([-\\/\\._])(0?2)([-\\/\\._])(29)$))";
		return str.matches(matchesStr);
	}

	@Override
	public boolean isDateyyMMddHHmmss(String str) {
		String matchesStr = "("
				+ "(^((1[8-9]\\d{2})|([2-9]\\d{3}))([-\\/\\._])(10|12|0?[13578])([-\\/\\._])(3[01]|[12][0-9]|0?[1-9])(\\s)(([0-1]?[0-9]{1})|([2]?[0-3]{1}))([.:])(([0-5]?[0-9]{1}))([.:])((([0-5]?[0-9]{1})))$)"
				+ "|"
				+ "(^((1[8-9]\\d{2})|([2-9]\\d{3}))([-\\/\\._])(11|0?[469])([-\\/\\._])(30|[12][0-9]|0?[1-9])(\\s)(([0-1]?[0-9]{1})|([2]?[0-3]{1}))([.:])(([0-5]?[0-9]{1}))([.:])((([0-5]?[0-9]{1})))$)"
				+ "|"
				+ "(^((1[8-9]\\d{2})|([2-9]\\d{3}))([-\\/\\._])(0?2)([-\\/\\._])(2[0-8]|1[0-9]|0?[1-9])(\\s)(([0-1]?[0-9]{1})|([2]?[0-3]{1}))([.:])(([0-5]?[0-9]{1}))([.:])((([0-5]?[0-9]{1})))$)"
				+ "|"
				+ "(^([2468][048]00)([-\\/\\._])(0?2)([-\\/\\._])(29)(\\s)(([0-1]?[0-9]{1})|([2]?[0-3]{1}))([.:])(([0-5]?[0-9]{1}))([.:])((([0-5]?[0-9]{1})))$)"
				+ "|"
				+ "(^([3579][26]00)([-\\/\\._])(0?2)([-\\/\\._])(29)(\\s)(([0-1]?[0-9]{1})|([2]?[0-3]{1}))([.:])(([0-5]?[0-9]{1}))([.:])((([0-5]?[0-9]{1})))$)"
				+ "|"
				+ "(^([1][89][0][48])([-\\/\\._])(0?2)([-\\/\\._])(29)(\\s)(([0-1]?[0-9]{1})|([2]?[0-3]{1}))([.:])(([0-5]?[0-9]{1}))([.:])((([0-5]?[0-9]{1})))$)"
				+ "|"
				+ "(^([2-9][0-9][0][48])([-\\/\\._])(0?2)([-\\/\\._])(29)(\\s)(([0-1]?[0-9]{1})|([2]?[0-3]{1}))([.:])(([0-5]?[0-9]{1}))([.:])((([0-5]?[0-9]{1})))$)"
				+ "|"
				+ "(^([1][89][2468][048])([-\\/\\._])(0?2)([-\\/\\._])(29)(\\s)(([0-1]?[0-9]{1})|([2]?[0-3]{1}))([.:])(([0-5]?[0-9]{1}))([.:])((([0-5]?[0-9]{1})))$)"
				+ "|"
				+ "(^([2-9][0-9][2468][048])([-\\/\\._])(0?2)([-\\/\\._])(29)(\\s)(([0-1]?[0-9]{1})|([2]?[0-3]{1}))([.:])(([0-5]?[0-9]{1}))([.:])((([0-5]?[0-9]{1})))$)"
				+ "|"
				+ "(^([1][89][13579][26])([-\\/\\._])(0?2)([-\\/\\._])(29)(\\s)(([0-1]?[0-9]{1})|([2]?[0-3]{1}))([.:])(([0-5]?[0-9]{1}))([.:])((([0-5]?[0-9]{1})))$)"
				+ "|"
				+ "(^([2-9][0-9][13579][26])([-\\/\\._])(0?2)([-\\/\\._])(29)(\\s)(([0-1]?[0-9]{1})|([2]?[0-3]{1}))([.:])(([0-5]?[0-9]{1}))([.:])((([0-5]?[0-9]{1})))$)"
				+ ")";
		return str.matches(matchesStr);
	}

	@Override
	public boolean isDateyyMMddHHmm(String str) {
		String matchesStr = "("
				+ "(^((1[8-9]\\d{2})|([2-9]\\d{3}))([-\\/\\._])(10|12|0?[13578])([-\\/\\._])(3[01]|[12][0-9]|0?[1-9])(\\s)(([0-1]?[0-9]{1})|([2]?[0-3]{1}))([.:])(([0-5]?[0-9]{1}))$)"
				+ "|"
				+ "(^((1[8-9]\\d{2})|([2-9]\\d{3}))([-\\/\\._])(11|0?[469])([-\\/\\._])(30|[12][0-9]|0?[1-9])(\\s)(([0-1]?[0-9]{1})|([2]?[0-3]{1}))([.:])(([0-5]?[0-9]{1}))$)"
				+ "|"
				+ "(^((1[8-9]\\d{2})|([2-9]\\d{3}))([-\\/\\._])(0?2)([-\\/\\._])(2[0-8]|1[0-9]|0?[1-9])(\\s)(([0-1]?[0-9]{1})|([2]?[0-3]{1}))([.:])(([0-5]?[0-9]{1}))$)"
				+ "|"
				+ "(^([2468][048]00)([-\\/\\._])(0?2)([-\\/\\._])(29)(\\s)(([0-1]?[0-9]{1})|([2]?[0-3]{1}))([.:])(([0-5]?[0-9]{1}))$)"
				+ "|"
				+ "(^([3579][26]00)([-\\/\\._])(0?2)([-\\/\\._])(29)(\\s)(([0-1]?[0-9]{1})|([2]?[0-3]{1}))([.:])(([0-5]?[0-9]{1}))$)"
				+ "|"
				+ "(^([1][89][0][48])([-\\/\\._])(0?2)([-\\/\\._])(29)(\\s)(([0-1]?[0-9]{1})|([2]?[0-3]{1}))([.:])(([0-5]?[0-9]{1}))$)"
				+ "|"
				+ "(^([2-9][0-9][0][48])([-\\/\\._])(0?2)([-\\/\\._])(29)(\\s)(([0-1]?[0-9]{1})|([2]?[0-3]{1}))([.:])(([0-5]?[0-9]{1}))$)"
				+ "|"
				+ "(^([1][89][2468][048])([-\\/\\._])(0?2)([-\\/\\._])(29)(\\s)(([0-1]?[0-9]{1})|([2]?[0-3]{1}))([.:])(([0-5]?[0-9]{1}))$)"
				+ "|"
				+ "(^([2-9][0-9][2468][048])([-\\/\\._])(0?2)([-\\/\\._])(29)(\\s)(([0-1]?[0-9]{1})|([2]?[0-3]{1}))([.:])(([0-5]?[0-9]{1}))$)"
				+ "|"
				+ "(^([1][89][13579][26])([-\\/\\._])(0?2)([-\\/\\._])(29)(\\s)(([0-1]?[0-9]{1})|([2]?[0-3]{1}))([.:])(([0-5]?[0-9]{1}))$)"
				+ "|"
				+ "(^([2-9][0-9][13579][26])([-\\/\\._])(0?2)([-\\/\\._])(29)(\\s)(([0-1]?[0-9]{1})|([2]?[0-3]{1}))([.:])(([0-5]?[0-9]{1}))$)"
				+ ")";
		return str.matches(matchesStr);
	}

	@Override
	public boolean isTimeHHmm(String str) {
		String matchesStr = "^(\\s)(([0-1]?[0-9]{1})|([2]?[0-3]{1}))([.:])(([0-5]?[0-9]{1}))$";
		return str.matches(matchesStr);
	}

	@Override
	public boolean isTimeHHHmmss(String str) {
		String matchesStr = "^(\\s)(([0-1]?[0-9]{1})|([2]?[0-3]{1}))([.:])(([0-5]?[0-9]{1}))([.:])((([0-5]?[0-9]{1})))$";
		return str.matches(matchesStr);
	}

}
